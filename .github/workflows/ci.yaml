---
name: ci

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:

jobs:

  ubuntu-rust:
    runs-on: ubuntu-18.04
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Run build
        run: |
          bash ./scripts/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: ubuntu-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  macos-rust:
    runs-on: macos-10.15
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run build
        run: |
          bash ./scripts/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: macos-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  windows-rust:
    runs-on: windows-2019
    steps:

      - name: Checkout source
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ssh-key: ${{ secrets.SSH_KEY }}

      - name: Install LLVM
        run: choco install -y --no-progress llvm

      - name: Install msys2 packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: bash git

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-pc-windows-msvc
          override: true
          components: rustfmt, clippy

      - name: Run build
        shell: msys2 {0}
        env:
          LIBCLANG_PATH: "C:\\Program Files\\LLVM\\bin"
        run: |
          export PATH="$PATH:/C/Rust/.cargo/bin:/C/ProgramData/chocolatey/bin:/C/Program Files/CMake/bin"
          bash ./scripts/ci-build.sh
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV

      - uses: actions/upload-artifact@v2
        with:
          name: windows-rust-artifacts
          path: |
            ${{ env.RELEASE_ARCHIVE }}
            release-archive.filename

  release:
    needs: [ubuntu-rust, windows-rust, macos-rust]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v2
        with:
          name: ubuntu-rust-artifacts
      - run: |
          ls -l
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Upload release asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: application/gzip
      - uses: actions/download-artifact@v2
        with:
          name: macos-rust-artifacts
      - run: |
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Upload release asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: application/gzip
      - uses: actions/download-artifact@v2
        with:
          name: windows-rust-artifacts
      - run: |
          echo "RELEASE_ARCHIVE=$(cat release-archive.filename)" >>$GITHUB_ENV
      - name: Upload release asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_ARCHIVE }}
          asset_name: ${{ env.RELEASE_ARCHIVE }}
          asset_content_type: application/zip
